coords_sf <- st_as_sf(coords, coords = c("long_dd", "lat_dd"), crs = 4326)
# 4. Load high-resolution world map as sf
world_map <- ne_countries(scale = 10, returnclass = "sf")
# 📥 Importación y limpieza de datos
library(readxl)
library(janitor)
library(tidyverse)     # Incluye: dplyr, ggplot2, tidyr, readr, purrr, tibble, stringr, forcats
# 📊 Estadística descriptiva y análisis
library(moments)       # Skewness, kurtosis
library(DescTools)     # Estadísticos adicionales y gráficos
rm(list=ls())
source("E:/Investigación/Repositorios/Lapacom/Data/ToAnalyze/Data_Analysis.R")
# 📥 Importación y limpieza de datos
library(readxl)
library(janitor)
library(tidyverse)     # Incluye: dplyr, ggplot2, tidyr, readr, purrr, tibble, stringr, forcats
# 📊 Estadística descriptiva y análisis
library(moments)       # Skewness, kurtosis
library(DescTools)     # Estadísticos adicionales y gráficos
library(descr)         # Tablas cruzadas, análisis descriptivo
library(effsize)       # Cálculo de tamaños de efecto
library(vcd)           # Visualización de tablas de contingencia
# 📈 Modelos estadísticos
library(car)           # Diagnósticos para modelos lineales
library(multcomp)      # Comparaciones múltiples (post hoc)
library(lmtest)        # Pruebas sobre modelos lineales
library(conover.test)  # Test de Conover-Iman
library(pROC)          # Curvas ROC
library(moderndive)    # Modelos y visualización intuitiva
# 🖼️ Visualización avanzada
library(ggthemes)
library(hrbrthemes)
library(viridis)
library(ggridges)
library(gridExtra)     # Combinar plots
library(flextable)     # Tablas formateadas para informes
# 🗺️ Datos espaciales
library(sf)
library(ggspatial)
library(ggmap)
library(rnaturalearth)
# 🧰 Herramientas auxiliares
library(stringr)       # Incluido en tidyverse, pero útil si se usa explícitamente
library(devtools)      # Para instalar paquetes desde GitHub (solo si necesario)
install.packages("devtools")
library(devtools)      # Para instalar paquetes desde GitHub (solo si necesario)
# 📥 Importación y limpieza de datos
library(readxl)
library(janitor)
library(tidyverse)     # Incluye: dplyr, ggplot2, tidyr, readr, purrr, tibble, stringr, forcats
# 📊 Estadística descriptiva y análisis
library(moments)       # Skewness, kurtosis
library(DescTools)     # Estadísticos adicionales y gráficos
library(descr)         # Tablas cruzadas, análisis descriptivo
library(effsize)       # Cálculo de tamaños de efecto
library(vcd)           # Visualización de tablas de contingencia
# 📈 Modelos estadísticos
library(car)           # Diagnósticos para modelos lineales
library(multcomp)      # Comparaciones múltiples (post hoc)
library(lmtest)        # Pruebas sobre modelos lineales
library(conover.test)  # Test de Conover-Iman
library(pROC)          # Curvas ROC
library(moderndive)    # Modelos y visualización intuitiva
# 🖼️ Visualización avanzada
library(ggthemes)
library(hrbrthemes)
library(viridis)
library(ggridges)
library(gridExtra)     # Combinar plots
library(flextable)     # Tablas formateadas para informes
# 🗺️ Datos espaciales
library(sf)
library(ggspatial)
library(ggmap)
library(rnaturalearth)
# 🧰 Herramientas auxiliares
library(stringr)       # Incluido en tidyverse, pero útil si se usa explícitamente
library(devtools)      # Para instalar paquetes desde GitHub (solo si necesario)
#Databases
Mad_RAW <- read_excel("Madeira/BD_LIMPETS_MAD_1996-2018.xlsx",
sheet = "Data", range = "A1:T69707")
Mad_RAW_Clean <- Mad_RAW %>% clean_names() #Arregla el formato de los nombre de las variables
names(Mad_RAW_Clean)
Mad_selected <- dplyr::select(Mad_RAW_Clean,
species, year, month, total_length_mm, total_length_class_mm,
weight_g,mature_imature, sampling_site,lat,long, protective_regime,
proximity_human_settlements, accessibility,
age_lt, age_months, age_class) %>%
mutate(across(where(is.character), as.factor))
summary(Mad_selected)
Mad_2sp <- Mad_selected %>%
filter(species %in% c("Patella ordinaria", "Patella aspera"))
sum(is.na(Mad_2sp$sampling_site))
sum(trimws(Mad_2sp$sampling_site) == "")
Mad_2sp_site <- Mad_2sp %>%
filter(!is.na(sampling_site) & trimws(sampling_site) != "")
# 1. Function to convert DMS to decimal degrees
convert_dms_to_decimal <- function(dms) {
parts <- str_match(dms, "(\\d+)°(\\d+)'(\\d+\\.?\\d*)\"?([NSEW])")
deg <- as.numeric(parts[,2])
min <- as.numeric(parts[,3])
sec <- as.numeric(parts[,4])
dir <- parts[,5]
decimal <- deg + min/60 + sec/3600
ifelse(dir %in% c("S", "W"), -decimal, decimal)
}
# 2. Create a unique coordinates data frame
coords <- Mad_2sp_site %>%
dplyr::select(sampling_site, lat, long) %>%
distinct() %>%
drop_na(lat, long) %>%
mutate(
lat_dd = convert_dms_to_decimal(lat),
long_dd = convert_dms_to_decimal(long)
)
# 3. Convert coords to sf object
coords_sf <- st_as_sf(coords, coords = c("long_dd", "lat_dd"), crs = 4326)
# 4. Load high-resolution world map as sf
world_map <- ne_countries(scale = 10, returnclass = "sf")
#Databases
Mad_RAW <- read_excel("Madeira/BD_LIMPETS_MAD_1996-2018.xlsx",
sheet = "Data", range = "A1:T69707")
Mad_RAW_Clean <- Mad_RAW %>% clean_names() #Arregla el formato de los nombre de las variables
names(Mad_RAW_Clean)
Mad_selected <- dplyr::select(Mad_RAW_Clean,
species, year, month, total_length_mm, total_length_class_mm,
weight_g,mature_imature, sampling_site,lat,long, protective_regime,
proximity_human_settlements, accessibility,
age_lt, age_months, age_class) %>%
mutate(across(where(is.character), as.factor))
summary(Mad_selected)
Mad_2sp <- Mad_selected %>%
filter(species %in% c("Patella ordinaria", "Patella aspera"))
Mad_2sp_site <- Mad_2sp %>%
filter(!is.na(sampling_site) & trimws(sampling_site) != "")
# 1. Function to convert DMS to decimal degrees
convert_dms_to_decimal <- function(dms) {
parts <- str_match(dms, "(\\d+)°(\\d+)'(\\d+\\.?\\d*)\"?([NSEW])")
deg <- as.numeric(parts[,2])
min <- as.numeric(parts[,3])
sec <- as.numeric(parts[,4])
dir <- parts[,5]
decimal <- deg + min/60 + sec/3600
ifelse(dir %in% c("S", "W"), -decimal, decimal)
}
# 2. Create a unique coordinates data frame
coords <- Mad_2sp_site %>%
dplyr::select(sampling_site, lat, long) %>%
distinct() %>%
drop_na(lat, long) %>%
mutate(
lat_dd = convert_dms_to_decimal(lat),
long_dd = convert_dms_to_decimal(long)
)
# 3. Convert coords to sf object
coords_sf <- st_as_sf(coords, coords = c("long_dd", "lat_dd"), crs = 4326)
# 4. Load high-resolution world map as sf
world_map <- ne_countries(scale = 10, returnclass = "sf")
# 4. Load high-resolution world map as sf
devtools::install_github("ropensci/rnaturalearthhires")
world_map <- ne_countries(scale = 50, returnclass = "sf")
library(rnaturalearth)
world_map <- ne_countries(scale = 50, returnclass = "sf")
source("E:/Investigación/Repositorios/Lapacom/Data/ToAnalyze/Data_Analysis.R")
# 📥 Importación y limpieza de datos
library(readxl)
library(janitor)
library(tidyverse)
# 📊 Estadística descriptiva y análisis
library(moments)
library(DescTools)
library(descr)
library(effsize)
library(vcd)
# 📈 Modelos estadísticos
library(car)
library(multcomp)
library(lmtest)
library(conover.test)
library(pROC)
library(moderndive)
# 🖼️ Visualización avanzada
library(ggthemes)
library(hrbrthemes)
library(viridis)
library(ggridges)
library(gridExtra)
library(flextable)
# 🗺️ Datos espaciales
library(sf)
library(ggspatial)
library(ggmap)
library(rnaturalearth)
# Instalar rnaturalearthhires si falta
if (!requireNamespace("rnaturalearthhires", quietly = TRUE)) {
install.packages("devtools")
devtools::install_github("ropensci/rnaturalearthhires")
}
library(rnaturalearthhires)
# 🧰 Auxiliares
library(stringr)
# ───────────────────────────────────────────────
# DATOS
Mad_RAW <- read_excel("Madeira/BD_LIMPETS_MAD_1996-2018.xlsx",
sheet = "Data", range = "A1:T69707")
Mad_RAW_Clean <- Mad_RAW %>% clean_names()
Mad_selected <- Mad_RAW_Clean %>%
dplyr::select(species, year, month, total_length_mm, total_length_class_mm,
weight_g, mature_imature, sampling_site, lat, long,
protective_regime, proximity_human_settlements,
accessibility, age_lt, age_months, age_class) %>%
mutate(across(where(is.character), as.factor))
# Filtrar por especies objetivo
Mad_2sp <- Mad_selected %>%
filter(species %in% c("Patella ordinaria", "Patella aspera"))
Mad_2sp_site <- Mad_2sp %>%
filter(!is.na(sampling_site) & trimws(sampling_site) != "")
deg <- as.numeric(parts[, 2])
# 1. Función para convertir DMS a decimal
convert_dms_to_decimal <- function(dms) {
parts <- str_match(dms, "(\\d+)°(\\d+)'(\\d+\\.?\\d*)\"?([NSEW])")
deg <- as.numeric(parts[, 2])
min <- as.numeric(parts[, 3])
sec <- as.numeric(parts[, 4])
dir <- parts[, 5]
decimal <- deg + min / 60 + sec / 3600
ifelse(dir %in% c("S", "W"), -decimal, decimal)
}
# 2. Crear data frame con coordenadas únicas y convertir a decimal
coords <- Mad_2sp_site %>%
dplyr::select(sampling_site, lat, long) %>%
distinct() %>%
drop_na(lat, long) %>%
mutate(
lat_dd = convert_dms_to_decimal(lat),
long_dd = convert_dms_to_decimal(long)
)
# 3. Convertir a objeto sf
coords_sf <- st_as_sf(coords, coords = c("long_dd", "lat_dd"), crs = 4326)
# 4. Mapa base de alta resolución
world_map <- ne_countries(scale = 50, returnclass = "sf")  # usa 10 si hires funciona
# 4. Mapa base de alta resolución
world_map <- ne_countries(scale = 50, returnclass = "sf")  # usa 10 si hires funciona
# 5. Graficar mapa
ggplot() +
geom_sf(data = world_map, fill = "gray90", color = "gray60") +
geom_sf(data = coords_sf, aes(color = sampling_site), size = 3) +
coord_sf(xlim = c(-17.5, -16.4), ylim = c(32.4, 33.0), expand = FALSE) +
annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +
theme_minimal() +
labs(title = "Sampling Sites in Madeira Archipelago",
x = "Longitude", y = "Latitude", color = "Sampling Site") +
theme(legend.position = "bottom")
install.packages("rnaturalearthdata")
library(rnaturalearthdata)
# 4. Mapa base de alta resolución
world_map <- ne_countries(scale = 50, returnclass = "sf")  # usa 10 si hires funciona
# 5. Graficar mapa
ggplot() +
geom_sf(data = world_map, fill = "gray90", color = "gray60") +
geom_sf(data = coords_sf, aes(color = sampling_site), size = 3) +
coord_sf(xlim = c(-17.5, -16.4), ylim = c(32.4, 33.0), expand = FALSE) +
annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +
theme_minimal() +
labs(title = "Sampling Sites in Madeira Archipelago",
x = "Longitude", y = "Latitude", color = "Sampling Site") +
theme(legend.position = "bottom")
# 4. Obtener mapa detallado de Portugal con GADM
if (!requireNamespace("raster", quietly = TRUE)) install.packages("raster")
# 4. Obtener mapa detallado de Portugal con GADM
if (!requireNamespace("raster", quietly = TRUE)) install.packages("raster")
library(raster)
portugal_gadm <- getData("GADM", country = "PRT", level = 1, path = tempdir())
portugal_sf <- st_as_sf(portugal_gadm)
library(geodata)  # Nuevo: reemplaza a raster::getData
# 🧰 Auxiliares
library(stringr)
rm(list = ls())
# 📥 Importación y limpieza de datos
library(readxl)
library(janitor)
library(tidyverse)
source("E:/Investigación/Repositorios/Lapacom/Data/ToAnalyze/Data_Analysis.R")
rm(list = ls())
# 📥 Importación y limpieza de datos
library(readxl)
library(janitor)
library(tidyverse)
# 📊 Estadística descriptiva y análisis
library(moments)
library(DescTools)
library(descr)
library(effsize)
library(vcd)
# 📈 Modelos estadísticos
library(car)
library(multcomp)
library(lmtest)
library(conover.test)
library(pROC)
library(moderndive)
# 🖼️ Visualización avanzada
library(ggthemes)
library(hrbrthemes)
library(viridis)
library(ggridges)
library(gridExtra)
library(flextable)
# 🗺️ Datos espaciales
library(sf)
library(ggspatial)
library(ggmap)
library(geodata)  # Nuevo: reemplaza a raster::getData
# 🧰 Auxiliares
library(stringr)
# ───────────────────────────────────────────────
# DATOS
Mad_RAW <- read_excel("Madeira/BD_LIMPETS_MAD_1996-2018.xlsx",
sheet = "Data", range = "A1:T69707")
Mad_RAW_Clean <- Mad_RAW %>% clean_names()
Mad_selected <- Mad_RAW_Clean %>%
dplyr::select(species, year, month, total_length_mm, total_length_class_mm,
weight_g, mature_imature, sampling_site, lat, long,
protective_regime, proximity_human_settlements,
accessibility, age_lt, age_months, age_class) %>%
mutate(across(where(is.character), as.factor))
# Filtrar por especies objetivo
Mad_2sp <- Mad_selected %>%
filter(species %in% c("Patella ordinaria", "Patella aspera"))
Mad_2sp_site <- Mad_2sp %>%
filter(!is.na(sampling_site) & trimws(sampling_site) != "")
# 1. Función para convertir DMS a decimal
convert_dms_to_decimal <- function(dms) {
parts <- str_match(dms, "(\\d+)°(\\d+)'(\\d+\\.?\\d*)\"?([NSEW])")
deg <- as.numeric(parts[, 2])
min <- as.numeric(parts[, 3])
sec <- as.numeric(parts[, 4])
dir <- parts[, 5]
decimal <- deg + min / 60 + sec / 3600
ifelse(dir %in% c("S", "W"), -decimal, decimal)
}
# 2. Crear data frame con coordenadas únicas y convertir a decimal
coords <- Mad_2sp_site %>%
dplyr::select(sampling_site, lat, long) %>%
distinct() %>%
drop_na(lat, long) %>%
mutate(
lat_dd = convert_dms_to_decimal(lat),
long_dd = convert_dms_to_decimal(long)
)
# 3. Convertir a objeto sf
coords_sf <- st_as_sf(coords, coords = c("long_dd", "lat_dd"), crs = 4326)
# 4. Obtener mapa detallado de Portugal con GADM
if (!requireNamespace("raster", quietly = TRUE)) install.packages("raster")
library(raster)
portugal_gadm <- getData("GADM", country = "PRT", level = 1, path = tempdir())
portugal_sf <- st_as_sf(portugal_gadm)
# Filtrar región de Madeira
madeira_sf <- portugal_sf %>% filter(NAME_1 == "Madeira")
# 1. Función para convertir DMS a decimal
convert_dms_to_decimal <- function(dms) {
parts <- str_match(dms, "(\\d+)°(\\d+)'(\\d+\\.?\\d*)\"?([NSEW])")
deg <- as.numeric(parts[, 2])
min <- as.numeric(parts[, 3])
sec <- as.numeric(parts[, 4])
dir <- parts[, 5]
decimal <- deg + min / 60 + sec / 3600
ifelse(dir %in% c("S", "W"), -decimal, decimal)
}
# 2. Crear data frame con coordenadas únicas y convertir a decimal
coords <- Mad_2sp_site %>%
dplyr::select(sampling_site, lat, long) %>%
distinct() %>%
drop_na(lat, long) %>%
mutate(
lat_dd = convert_dms_to_decimal(lat),
long_dd = convert_dms_to_decimal(long)
)
# 3. Convertir a objeto sf
coords_sf <- st_as_sf(coords, coords = c("long_dd", "lat_dd"), crs = 4326)
# 4. Obtener mapa detallado de Portugal con GADM desde geodata
portugal_gadm <- geodata::gadm(country = "PRT", level = 1, path = tempdir())
portugal_sf <- st_as_sf(portugal_gadm)
# Filtrar región de Madeira
madeira_sf <- portugal_sf %>% filter(NAME_1 == "Madeira")
# 5. Graficar con mapa detallado
ggplot() +
geom_sf(data = madeira_sf, fill = "gray90", color = "gray60") +
geom_sf(data = coords_sf, aes(color = sampling_site), size = 3) +
coord_sf(xlim = c(-17.6, -15.6), ylim = c(31.9, 33.3), expand = FALSE) +
annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +
theme_minimal() +
labs(title = "Sampling Sites in Madeira Archipelago",
x = "Longitude", y = "Latitude", color = "Sampling Site") +
theme(legend.position = "bottom")
# 5. Graficar con mapa detallado
ggplot() +
geom_sf(data = madeira_sf, fill = "gray90", color = "gray60") +
geom_sf(data = coords_sf, aes(color = sampling_site), size = 3) +
coord_sf(xlim = c(-17.6, -16.3), ylim = c(32.4, 33.2), expand = FALSE) +
annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +
theme_minimal() +
labs(title = "Sampling Sites in Madeira Archipelago",
x = "Longitude", y = "Latitude", color = "Sampling Site") +
theme(legend.position = "bottom")
# 5. Graficar con mapa detallado
ggplot() +
geom_sf(data = madeira_sf, fill = "gray90", color = "gray60") +
geom_sf(data = coords_sf, aes(color = sampling_site), size = 3) +
coord_sf(xlim = c(-17.6, -16.2), ylim = c(32.4, 33.2), expand = FALSE) +
annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +
theme_minimal() +
labs(title = "Sampling Sites in Madeira Archipelago",
x = "Longitude", y = "Latitude", color = "Sampling Site") +
theme(legend.position = "bottom")
source("E:/Investigación/Repositorios/Lapacom/Data/ToAnalyze/Data_Analysis.R")
# 5. Graficar con mapa detallado
ggplot() +
geom_sf(data = madeira_sf, fill = "gray90", color = "gray60") +
geom_sf(data = coords_sf, aes(shape = sampling_site), size = 3) +
coord_sf(xlim = c(-17.6, -16.2), ylim = c(32.4, 33.2), expand = FALSE) +
annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +
theme_minimal() +
labs(title = "Sampling Sites in Madeira Archipelago",
x = "Longitude", y = "Latitude", color = "Sampling Site") +
theme(legend.position = "bottom")
# 5. Graficar con mapa detallado
ggplot() +
geom_sf(data = madeira_sf, fill = "gray90", color = "gray60") +
geom_sf(data = coords_sf, aes(shape = sampling_site), size = 3) +
coord_sf(xlim = c(-17.6, -16.2), ylim = c(32.4, 33.2), expand = FALSE) +
annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +
theme_minimal() +
labs(title = "Sampling Sites in Madeira Archipelago",
x = "Longitude", y = "Latitude", shape = "Sampling Site") +
theme(legend.position = "bottom")
# 5. Graficar con mapa detallado
ggplot() +
geom_sf(data = madeira_sf, fill = "gray90", color = "gray60") +
geom_sf(data = coords_sf, aes(color = sampling_site), size = 3) +
coord_sf(xlim = c(-17.6, -16.2), ylim = c(32.4, 33.2), expand = FALSE) +
annotation_scale(location = "bl", width_hint = 0.3) +
annotation_north_arrow(location = "tl", which_north = "true",
style = north_arrow_fancy_orienteering()) +
theme_minimal() +
labs(title = "Sampling Sites in Madeira Archipelago",
x = "Longitude", y = "Latitude", shape = "Sampling Site") +
theme(legend.position = "bottom")
# ───────────────────────────────────────────────
# Group Analysis MPA (Control) vs Full access (Exploited)
summary(Mad_2sp_site)
analisis_por_regimen <- function(data, especie) {
analisis_por_regimen <- function(data, especie) {
# Función para análisis por especie
analisis_por_regimen <- function(data, especie) {
cat("\n📌 Análisis para:", especie, "\n")
df <- data %>% filter(species == especie)
# Boxplot
p <- ggplot(df, aes(x = protective_regime, y = total_length_mm, fill = protective_regime)) +
geom_boxplot() +
labs(title = paste("Total Length by Protective Regime:", especie),
x = "Protective Regime", y = "Total Length (mm)") +
theme_minimal()
print(p)
# Verificar supuestos para ANOVA
df <- df %>% filter(!is.na(total_length_mm) & !is.na(protective_regime))
modelo <- aov(total_length_mm ~ protective_regime, data = df)
# Prueba de homogeneidad de varianzas
levene <- car::leveneTest(total_length_mm ~ protective_regime, data = df)
print(levene)
if (levene$`Pr(>F)`[1] > 0.05) {
# ANOVA si se cumplen supuestos
cat("\n✅ Varianzas homogéneas → ANOVA\n")
res_anova <- summary(modelo)
print(res_anova)
# Post hoc si hay diferencia
if (res_anova[[1]]$`Pr(>F)`[1] < 0.05) {
cat("🔍 Post Hoc (Tukey):\n")
print(TukeyHSD(modelo))
}
} else {
# Kruskal-Wallis si no se cumplen
cat("\n⚠️ Varianzas NO homogéneas → Kruskal-Wallis\n")
res_kw <- kruskal.test(total_length_mm ~ protective_regime, data = df)
print(res_kw)
# Post hoc: Conover-Iman
if (res_kw$p.value < 0.05) {
cat("🔍 Post Hoc (Conover-Iman):\n")
print(conover.test::conover.test(df$total_length_mm, df$protective_regime, method = "holm"))
}
}
}
# ─── Aplicar a cada especie ───────────────────────────────
analisis_por_regimen(Mad_2sp_site, "Patella aspera")
source("E:/Investigación/Repositorios/Lapacom/Data/ToAnalyze/Data_Analysis.R")
# ─── Aplicar a cada especie ───────────────────────────────
analisis_por_regimen(Mad_2sp_site, "Patella aspera")
source("E:/Investigación/Repositorios/Lapacom/Data/ToAnalyze/Data_Analysis.R")
